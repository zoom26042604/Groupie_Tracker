<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{.Artist.Name}}</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/static/css/artistPage.css">

    <script src="/static/JS/slide.js"></script>
</head>

<body>
<div class="container">
    <h1>{{.Artist.Name}}</h1>

    <img src="{{.Artist.Image}}" alt="{{.Artist.Name}}" class="artist-image">

    <h2 class="section-title">Band Members</h2>
    <ul>
        {{range .Artist.Members}}
            <li>{{.}}</li>
        {{end}}
    </ul>

    <h2 class="section-title">Info</h2>
    <div class="info-section">
        <p><strong>First Album:</strong> {{.Artist.FirstAlbum | formatDate}}</p>
        <p><strong>Creation Date:</strong> {{.Artist.CreationDate}}</p>
    </div>

    <h2 class="section-title">Locations</h2>
    <div class="slider-container slider-1">
        <div class="slider-1" id="locationSlider">
                {{range .Locations.Locations}}
                   <div class="slide">{{. | formatLocation}}</div>
                {{end}}
        </div>
    </div>

    <h2 class="section-title">Tour Dates</h2>
    <ul>
        {{range .Dates.Dates}}
            <li>{{. | removeAsterisks | formatDate}}</li>
        {{end}}
    </ul>
</div>

<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoibGVyYXBob3UiLCJhIjoiY202a3R2MXNzMDFlYjJrcjV1NTh4N2l2ayJ9.x0B8KMcr28PJjV03zuK5Iw';
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v9',
        projection: 'globe', // Display the map as a globe, since satellite-v9 defaults to Mercator
        zoom: 1,
        center: [30, 15]
    });

    map.addControl(new mapboxgl.NavigationControl());
    map.scrollZoom.disable();

    map.on('style.load', () => {
        map.setFog({}); // Set the default atmosphere style
    });

    // The following values can be changed to control rotation speed:

    // At low zooms, complete a revolution every two minutes.
    const secondsPerRevolution = 240;
    // Above zoom level 5, do not rotate.
    const maxSpinZoom = 5;
    // Rotate at intermediate speeds between zoom levels 3 and 5.
    const slowSpinZoom = 3;

    let userInteracting = false;
    const spinEnabled = true;

    function spinGlobe() {
        const zoom = map.getZoom();
        if (spinEnabled && !userInteracting && zoom < maxSpinZoom) {
            let distancePerSecond = 360 / secondsPerRevolution;
            if (zoom > slowSpinZoom) {
                // Slow spinning at higher zooms
                const zoomDif =
                    (maxSpinZoom - zoom) / (maxSpinZoom - slowSpinZoom);
                distancePerSecond *= zoomDif;
            }
            const center = map.getCenter();
            center.lng -= distancePerSecond;
            // Smoothly animate the map over one second.
            // When this animation is complete, it calls a 'moveend' event.
            map.easeTo({ center, duration: 1000, easing: (n) => n });
        }
    }

    // Pause spinning on interaction
    map.on('mousedown', () => {
        userInteracting = true;
    });
    map.on('dragstart', () => {
        userInteracting = true;
    });

    // When animation is complete, start spinning if there is no ongoing interaction
    map.on('moveend', () => {
        spinGlobe();
    });

    spinGlobe();
</script>

</body>
</html>